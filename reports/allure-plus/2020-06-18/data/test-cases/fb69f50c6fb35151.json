{
  "uid" : "fb69f50c6fb35151",
  "name" : "test_login1",
  "time" : {
    "start" : 1592466089285,
    "stop" : 1592466089285,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "KeyError: 'n'",
  "statusTrace" : "self = <allure_pytest.listener.AllureListener object at 0x0000012933F12400>\nitem = <Function test_login1>\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        if not self._cache.get(item.nodeid):\n            uuid = self._cache.push(item.nodeid)\n            test_result = TestResult(name=item.name, uuid=uuid, start=now(), stop=now())\n            self.allure_logger.schedule_test(uuid, test_result)\n    \n        yield\n    \n        uuid = self._cache.get(item.nodeid)\n        test_result = self.allure_logger.get_test(uuid)\n        for fixturedef in _test_fixtures(item):\n            group_uuid = self._cache.get(fixturedef)\n            if not group_uuid:\n                group_uuid = self._cache.push(fixturedef)\n                group = TestResultContainer(uuid=group_uuid)\n                self.allure_logger.start_group(group_uuid, group)\n            self.allure_logger.update_group(group_uuid, children=uuid)\n        params = item.callspec.params if hasattr(item, 'callspec') else {}\n    \n>       test_result.name = allure_name(item, params)\n\nC:\\Python\\lib\\site-packages\\allure_pytest\\listener.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <Function test_login1>, parameters = {}\n\n    def allure_name(item, parameters):\n        name = escape_name(item.name)\n        title = allure_title(item)\n>       return title.format(**parameters) if title else name\nE       KeyError: 'n'\n\nC:\\Python\\lib\\site-packages\\allure_pytest\\utils.py:112: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "__pytest_repeat_step_number",
    "time" : {
      "start" : 1592466089286,
      "stop" : 1592466089286,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1592466089089,
      "stop" : 1592466089204,
      "duration" : 115
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "KeyError: 'n'",
    "statusTrace" : "self = <allure_pytest.listener.AllureListener object at 0x0000012933F12400>\nitem = <Function test_login1>\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        if not self._cache.get(item.nodeid):\n            uuid = self._cache.push(item.nodeid)\n            test_result = TestResult(name=item.name, uuid=uuid, start=now(), stop=now())\n            self.allure_logger.schedule_test(uuid, test_result)\n    \n        yield\n    \n        uuid = self._cache.get(item.nodeid)\n        test_result = self.allure_logger.get_test(uuid)\n        for fixturedef in _test_fixtures(item):\n            group_uuid = self._cache.get(fixturedef)\n            if not group_uuid:\n                group_uuid = self._cache.push(fixturedef)\n                group = TestResultContainer(uuid=group_uuid)\n                self.allure_logger.start_group(group_uuid, group)\n            self.allure_logger.update_group(group_uuid, children=uuid)\n        params = item.callspec.params if hasattr(item, 'callspec') else {}\n    \n>       test_result.name = allure_name(item, params)\n\nC:\\Python\\lib\\site-packages\\allure_pytest\\listener.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <Function test_login1>, parameters = {}\n\n    def allure_name(item, parameters):\n        name = escape_name(item.name)\n        title = allure_title(item)\n>       return title.format(**parameters) if title else name\nE       KeyError: 'n'\n\nC:\\Python\\lib\\site-packages\\allure_pytest\\utils.py:112: KeyError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7dd7f9391701e753",
      "name" : "stderr",
      "source" : "7dd7f9391701e753.txt",
      "type" : "text/plain",
      "size" : 146
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "这是模块"
  }, {
    "name" : "severity",
    "value" : "trivial"
  }, {
    "name" : "story",
    "value" : "这是对用例的描述：登陆验证2"
  }, {
    "name" : "parentSuite",
    "value" : "testcases"
  }, {
    "name" : "suite",
    "value" : "Test_allure"
  }, {
    "name" : "subSuite",
    "value" : "Test_login2"
  }, {
    "name" : "host",
    "value" : "DESKTOP-T9LGAR2"
  }, {
    "name" : "thread",
    "value" : "112476-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.Test_allure"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "http://pm.shangdejigou.cn/zentao/bug-view-43120.html",
    "url" : "http://pm.shangdejigou.cn/zentao/bug-view-43120.html",
    "type" : "issue"
  }, {
    "name" : "http://pm.shangdejigou.cn/zentao/bug-view-43121.html",
    "url" : "http://pm.shangdejigou.cn/zentao/bug-view-43121.html",
    "type" : "test_case"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "trivial",
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "fb69f50c6fb35151.json",
  "parameterValues" : [ ]
}